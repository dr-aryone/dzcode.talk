# work in progres

=============== Auto =============

# Install opencv3

if you dont find these packages in pacman install and use pacaur instead

pacman -Syu base-devel
pacman -S opencv 3.2.0-1
pacman -S opencv-samples python-numpy


opencv-samples (optional) - Install all features of opencv
python-numpy (optional) - Python 3 interface
opencv 3.2.0-1   - here i have locked down a version number, but if you leave it out you will get the latest version available

The above will get you opencv3 with most cool features including video support

# Get python virtualenvs up

pacaur -S python-virtualenv  python-virtualenvwrapper

add this to your .zshrc or /bashrc

export WORKON_HOME=~/.virtualenvs
source /usr/bin/virtualenvwrapper.sh

now make your virtual env, remember to have the flag --system-site-packages so you immediatley have opencv and numpy that 
are installed in the system python and you dont have to symlink the opencv excecutables 


➜  mkvirtualenv cv --system-site-packages 

➜  workon cv

now check your opencv version

(cv) ➜  python
Python 3.6.0 (default, Jan 16 2017, 12:12:55) 
[GCC 6.3.1 20170109] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import cv2
>>> cv2.__version__
'3.2.0'
>>>

huh wait why do we import cv2 i thought we had installed opencv 3, well the 2 is not a version number a quote taken from 
open cv forum http://answers.opencv.org/question/63405/why-do-python-bindings-for-v3-still-use-package-name-cv2/

---actually the 2 does not refer to the version number of OpenCV. Basically it is the difference between the underlying C API,
which is denoted by the cv prefix and the C++ API which is denoted by the cv2 prefix. This is mainly a historical matter 
and it is kept to keep backwards compatibility. It also allows you to combine the C and C++ interface if you really need it,
but which is discouraged a lot!----



Let see an exaple. opencv comes with some cool python examples in the install folder located here

/usr/share/opencv/samples/python

go into the directory

cd /usr/share/opencv/samples/python

test video using your shiny new python environment

(cv) ➜  python python video.py



saved my desktop now going to run the texture example

(cv) ➜  python python texture_flow.py /home/tawanda/Pictures/opencvdemo.png





Thats it. Opencv3 with python3 boom!


=========== Manual ==============

The manual part involves building from source, havent done this yet when i do ill complete this section



sudo pacman -Syu base-devel

pacman -S python-numpy cmake mesa gtkglext intel-tbb libdc1394 openexr xine-lib eigen opencl-icd-loader 

pacman -S python-setuptools


$ cd ~
$ wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip
$ unzip opencv.zip

$ wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip
$ unzip opencv_contrib.zip

Well, we want the full install of OpenCV 3 to have access to features (no pun intended) such as SIFT and SURF.
In OpenCV 2.4, SIFT and SURF were included in the default installation of OpenCV. However, with the release of OpenCV 3+,
these packages have been moved to contrib, which houses either (1) modules that are currently in development or (2) modules
that are marked as “non-free” (i.e., patented). 





---------------------
After this, it is a  good idea to check if opencv was successfully installed by checking the libraries available for it via 

pkg-config --libs opencv

If the output lists a bunch of libraries, that’s good! If the command outputs something similar to the block below, then something definitely went wrong.

Package opencv was not found in the pkg-config search path.
Perhaps you should add the directory containing 'opencv.pc'
to the PKG_CONFIG_PATH environment variable
No package 'opencv' found
