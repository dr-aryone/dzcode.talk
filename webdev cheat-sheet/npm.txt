npm i package-lock-only 
npm cache clean --force
npm audit fix --force
npx package
npm dedupe //dedupe your project before publishing. It might remove a few packages for you.
npm outdated
npm update
npx npm-update-all

npm install --global eslint-config-wesbos babel-eslint eslint eslint-config-prettier eslint-config-airbnb eslint-plugin-html eslint-plugin-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react prettier eslint-plugin-react-hooks
npx install-peerdeps --global eslint-config-wesbos
npx install-peerdeps --dev eslint-config-wesbos

npm config delete proxy
npm config delete http-proxy
npm config delete https-proxy

SET PATH=C:\Program Files\Nodejs;%PATH%


npm shrinkwrap locks your dependencies version

npm i -g eslint-config-airbnb eslint-config-airbnb-base eslint-config-jest-enzyme eslint-config-prettier eslint-config-standard eslint-config-standard-jsx eslint-plugin-babel eslint-plugin-flowtype eslint-plugin-import eslint-plugin-jest eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-react eslint-plugin-standard prettier-eslint prettier-eslint-cli prettier-stylelint @typescript-eslint/eslint-plugin babel-eslint babel-core babel-loader babel-jest @typescript-eslint/parser typescript jshint eslint webpack babel eslint-plugin-typescript 

You can do a trick for this. Create a simple js file, create an array for global packages. If this file is called, it will run the command to install all the listed packages in the array, but user need to do for example, npm install then npm run global. The global script you'll reference to the js file. – Lucas May 29 '18 at 13:15

npm install -g npm-collect

Useful when
updating/developing several npm modules in parallel (especially using npm link)
creating an package.json file after installing modules

$ npm-collect --help
Usage: npm-collect <options>
Options:
  --devDependencies    process dev-dependencies instead of dependencies
  --new                include modules which are not found in package.json, but are installed
  --save               write changes to package.json
  -v <number>          verboselevel (0=silent,1=normal,2=debug)
Examples
Just see differences without writing to package.json

$ npm-collect
querystring@0.1.9 -> 0.2.0
modulefoo@0.2.9 -> 0.3.0
update your package.json

$ npm-collect --save
querystring@0.1.9 -> 0.2.0
modulefoo@0.2.9 -> 0.3.0
update package.json with newly discovered modules in node_modules

$ npm-collect --new --save
querystring@(unsaved) -> 0.2.0
ohmypgrah@(unsaved)   -> 0.2.0
******

npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator gravatar
npm i -D nodemon 
npm run electron-tsc ( moddoc for nodejs modules )

****
all in one =>

npm dedupe && npm outdated && npm update && npx npm-update-all && npm-collect && npm-collect --save && npm-collect --new --save && npm audit fix --force && npm cache clean --force

***
npm init -y from a folder with node modules in it and it will generate the mods for you
***
Run npm-check-updates to list what packages are out of date (basically the same thing as running npm outdated)
Run npm-check-updates -u to update all the versions in your package.json (this is the magic sauce)
Run npm update as usual to install the new versions of your packages based on the updated package.json

***
npm i -g npm-check-updates && ncu -u && npm i
npx npm-check -u
***
5. Lock down your dependencies versions
Run: npm shrinkwrap

Using shrinkwrap in your project generates an npm-shrinkwrap.json file. This allows you to pin the dependencies of your project to the specific version you’re currently using within your node_modules directory. When you run npm install and there is a npm-shrinkwrap.json present, it will override the listed dependencies and any semver ranges in package.json.

If you need verified consistency across package.json, npm-shrinkwrap.json and node_modules for your project, you should consider using npm-shrinkwrap.

***
npm i -g esm => a node module for compiling import from syntax